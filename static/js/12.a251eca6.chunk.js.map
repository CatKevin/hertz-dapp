{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/components/TokenVesting.tsx","views/Home/Home.tsx","utils/translateTextHelpers.ts","hooks/useI18n.ts","utils/formatBalance.ts","hooks/useWeb3.ts","hooks/useContract.ts","components/UnlockButton.tsx","config/constants/ifo.ts","config/constants/airdrop.ts","config/constants/index.ts","utils/callHelpers.ts","hooks/useHarvest.ts","utils/erc20.ts","components/Footer/Footer.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","leekPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","vestingContract","vestingABI","getVestingAddress","remainingTokens","bal","useLockBalance","reservedBalance","yieldFarmBalance","farms","useFarms","circSupply","minus","cakeSupply","leekPerBlock","times","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","tweetId","TokenVesting","cliff","releaseTime","finalTime","nextReleaseTime","linearReleaseInterval","releaseCount","releaseAmount","state","setState","contract","useVestingContract","Promise","all","releaseTotalCount","fetchVestingInfo","moment","utc","Number","format","toString","numeral","claim","release","send","from","href","mt","BannerImg","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","FarmStakingCard","Footer","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","find","translation","data","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useContext","TranslationsContext","displayBalance","dividedBy","getFullDisplayBalance","getMainTokenBalance","multipliedBy","urlProvider","NODE_URL","getNodeUrl","startsWith","Web3","providers","HttpProvider","timeout","WebsocketProvider","useWeb3","refEth","web3","setweb3","useContract","abi","contractOptions","eth","Contract","setContract","useIfoContract","ifo","useAirdropContract","airdrop","getAirdropAddress","vesting","useCake","erc20","useLottery","lottery","getLotteryAddress","useMasterchef","masterChef","useSousChef","config","poolsConfig","pool","sousId","rawAbi","poolCategory","PoolCategory","BINANCE","sousChefBnb","sousChef","contractAddress","process","props","comp","connect","reset","error","useWalletModal","onPresentConnectModal","onPresentWrongNetworkModal","variant","ifos","idoAddress","isActive","mainToken","subTitle","startTime","endTime","salesAmount","projectSiteUrl","tokenDecimals","description","totalAmount","isCommunity","tokenSymbol","approve","lpContract","masterChefContract","options","ethers","constants","MaxUint256","stake","amount","deposit","on","tx","transactionHash","sousStake","sousChefContract","sousStakeBnb","unstake","withdraw","sousUnstake","emergencyWithdraw","sousEmegencyUnstake","harvest","soushHarvest","soushHarvestBnb","useHarvest","farmPid","dispatch","useDispatch","txHash","fetchFarmUserDataAsync","farmPids","harvestPromises","provider","userAddress","balanceOf"],"mappings":"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","file":"static/js/12.a251eca6.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingLeek',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from 'hertz-uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from 'hertz-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({ earningsSum }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from 'hertz-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport vestingABI from \"config/abi/vesting.json\"\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress, getVestingAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\n\nexport const useLockBalance = () => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const vestingContract = getContract(vestingABI, getVestingAddress())\n      const bal = await vestingContract.methods.remainingTokens().call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [fastRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingLeek',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from 'hertz-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('./images/leek/2a.png');\n  background-size: 250px 250px;\n  background-repeat: no-repeat;\n  background-position: 220px 70px;;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const leekPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"./images/leek/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'HERTZ to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(leekPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'HERTZ in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(leekPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting LEEK')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from 'hertz-uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useLockBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useLockBalance() || new BigNumber(0)\n  const reservedBalance = new BigNumber(2500000000000000000000000)\n  const yieldFarmBalance = new BigNumber(5000000000000000000000000)\n  const farms = useFarms()\n  const leekPrice = usePriceCakeBusd()\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance).minus(reservedBalance).minus(yieldFarmBalance) : new BigNumber(0)\n  const cakeSupply = getBalanceNumber(circSupply)\n\n  let leekPerBlock = 0\n  if (farms && farms[0] && farms[0].leekPerBlock) {\n    leekPerBlock = new BigNumber(farms[0].leekPerBlock).div(new BigNumber(10).pow(18)).toNumber()\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Leek Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(leekPrice.times(totalSupply))} decimals={0} prefix=\"$\" />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Locked')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Community Reserved</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(reservedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">Yield Farm Reserved</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(yieldFarmBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New LEEK/block')}</Text>\n          <Text bold fontSize=\"14px\">\n            {leekPerBlock}\n          </Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from 'hertz-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue()\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading } from 'hertz-uikit'\nimport styled from 'styled-components'\nimport { Tweet } from 'react-twitter-widgets'\nimport useI18n from 'hooks/useI18n'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Tweet tweetId=\"1420928351930241025\" />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React, { useState, useEffect } from 'react'\nimport { Card, CardBody, Heading, Text, Link, Button } from 'hertz-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton'\n\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport numeral from 'numeral'\nimport { getVestingAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useVestingContract } from '../../../hooks/useContract'\nimport useRefresh from '../../../hooks/useRefresh'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TokenVesting = () => {\n  const [state, setState] = useState({\n    cliff: 0,\n    releaseTime: 0,\n    finalTime: 0,\n    nextReleaseTime: 0,\n    linearReleaseInterval: 0,\n    releaseCount: 0,\n    releaseAmount: 0,\n    remainingTokens: 0,\n  })\n  const { fastRefresh } = useRefresh()\n  const { account } = useWallet()\n\n  const contract = useVestingContract(getVestingAddress())\n\n  useEffect(() => {\n    const fetchVestingInfo = async () => {\n      const [\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      ] = await Promise.all([\n        contract.methods.cliff().call(),\n        contract.methods.releaseTime().call(),\n        contract.methods.finalTime().call(),\n        contract.methods.nextReleaseTime().call(),\n        contract.methods.linearReleaseInterval().call(),\n        contract.methods.releaseTotalCount().call(),\n        contract.methods.releaseAmount().call(),\n        contract.methods.remainingTokens().call(),\n      ])\n\n      setState({\n        cliff,\n        releaseTime,\n        finalTime,\n        nextReleaseTime,\n        linearReleaseInterval,\n        releaseCount,\n        releaseAmount,\n        remainingTokens,\n      })\n    }\n    fetchVestingInfo()\n  }, [contract, setState, fastRefresh])\n\n  const releaseTime = moment.utc(Number(state.releaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const finalTime = moment.utc(Number(state.finalTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const nextReleaseTime = moment.utc(Number(state.nextReleaseTime) * 1000).format('MMMM Do YYYY, HH:mm')\n  const linearReleaseInterval = Number(state.linearReleaseInterval / 3600 / 24 / 7).toFixed().toString()\n  const releaseAmount = numeral(getBalanceNumber(new BigNumber(state.releaseAmount))).format('0,0')\n  const remainingTokens = numeral(getBalanceNumber(new BigNumber(state.remainingTokens))).format('0,0')\n\n  const claim = async () => {\n    await contract.methods.release().send({ from: account })\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          HERTZ Vesting Info\n        </Heading>\n\n        <Row>\n          <Text fontSize=\"14px\">HERTZ Release Start Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {releaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">HERTZ Release End Time</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {finalTime} UTC\n            </Text>\n          </Link>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">Next HERTZ Release Date</Text>\n          <Link href=\"https://www.timeanddate.com/worldclock/timezone/utc\">\n            <Text bold fontSize=\"14px\" color=\"primary\">\n              {nextReleaseTime} UTC\n            </Text>\n          </Link>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">HERTZ Release Interval</Text>\n          <Text bold fontSize=\"14px\">\n            {linearReleaseInterval} WEEK\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">HERTZ Release Count </Text>\n          <Text bold fontSize=\"14px\">\n            {state.releaseCount}\n          </Text>\n        </Row>\n\n        <Row>\n          <Text fontSize=\"14px\">HERTZ Release Every Time </Text>\n          <Text bold fontSize=\"14px\">\n            {releaseAmount} HERTZ\n          </Text>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">HERTZ Locked </Text>\n          <Text bold fontSize=\"14px\">\n            {remainingTokens} HERTZ\n          </Text>\n        </Row>\n\n        <div>\n          {!account ? (\n            <UnlockButton fullWidth mt=\"8px\" />\n          ) : (\n            <Button mt=\"8px\" onClick={claim} fullWidth>\n              Claim\n            </Button>\n          )}\n        </div>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default TokenVesting\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'hertz-uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport Footer from 'components/Footer'\nimport FarmStakingCard from './components/FarmStakingCard'\n// import LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\nimport TokenVesting from './components/TokenVesting'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('./images/leek/3.png');\n  background-size: 200px 200px;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  padding-top: 200px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('./images/leek/3.png'), url('./images/leek/3b.png');\n    background-position: left center, right center;\n    height: 230px;\n    padding-top: 0;\n  }\n`\n\nconst BannerImg = styled.img`\n  width: 100%;\n  margin-bottom:20px;\n  margin-top:20px;\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <div>\n        <BannerImg src=\"./images/banner.png\" alt=\"banner\" />\n      </div>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n          <TokenVesting />\n        </Cards>\n        <Footer />\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import BigNumber from 'bignumber.js'\n\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\n  const displayBalance = new BigNumber(balance).dividedBy(new BigNumber(10).pow(decimals))\n  return displayBalance.toNumber()\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n\nexport const getMainTokenBalance = (balance: BigNumber, decimals = 18) => {\n  return balance.multipliedBy(new BigNumber(10).pow(decimals)).toFixed()\n}\n","import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || urlProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || urlProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n","import { useEffect, useState } from 'react'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getMasterChefAddress, getCakeAddress, getLotteryAddress, getLotteryTicketAddress, getAirdropAddress } from 'utils/addressHelpers'\nimport { poolsConfig } from 'config/constants'\nimport { PoolCategory } from 'config/constants/types'\nimport ifo from 'config/abi/ifo.json'\nimport erc20 from 'config/abi/erc20.json'\nimport vesting from 'config/abi/vesting.json'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport pancakeRabbits from 'config/abi/pancakeRabbits.json'\nimport airdrop from 'config/abi/airdrop.json'\nimport lottery from 'config/abi/lottery.json'\nimport lotteryTicket from 'config/abi/lotteryNft.json'\nimport masterChef from 'config/abi/masterchef.json'\nimport sousChef from 'config/abi/sousChef.json'\nimport sousChefBnb from 'config/abi/sousChefBnb.json'\n\nconst useContract = (abi: AbiItem, address: string, contractOptions?: ContractOptions) => {\n  const web3 = useWeb3()\n  const [contract, setContract] = useState(new web3.eth.Contract(abi, address, contractOptions))\n\n  useEffect(() => {\n    setContract(new web3.eth.Contract(abi, address, contractOptions))\n  }, [abi, address, contractOptions, web3])\n\n  return contract\n}\n\n/**\n * Helper hooks to get specific contracts (by ABI)\n */\n\nexport const useIfoContract = (address: string) => {\n  const ifoAbi = (ifo as unknown) as AbiItem\n  return useContract(ifoAbi, address)\n}\n\nexport const useAirdropContract = () => {\n  const abi = (airdrop as unknown) as AbiItem\n  return useContract(abi, getAirdropAddress())\n}\n\nexport const useVestingContract = (address: string) => {\n  const vestingAbi = (vesting as unknown) as AbiItem\n  return useContract(vestingAbi, address)\n}\n\nexport const useERC20 = (address: string) => {\n  const erc20Abi = (erc20 as unknown) as AbiItem\n  return useContract(erc20Abi, address)\n}\n\nexport const useCake = () => {\n  return useERC20(getCakeAddress())\n}\n\nexport const useRabbitMintingFarm = (address: string) => {\n  const rabbitMintingFarmAbi = (rabbitmintingfarm as unknown) as AbiItem\n  return useContract(rabbitMintingFarmAbi, address)\n}\n\nexport const usePancakeRabbits = (address: string) => {\n  const pancakeRabbitsAbi = (pancakeRabbits as unknown) as AbiItem\n  return useContract(pancakeRabbitsAbi, address)\n}\n\n\nexport const useLottery = () => {\n  const abi = (lottery as unknown) as AbiItem\n  return useContract(abi, getLotteryAddress())\n}\n\nexport const useLotteryTicket = () => {\n  const abi = (lotteryTicket as unknown) as AbiItem\n  return useContract(abi, getLotteryTicketAddress())\n}\n\nexport const useMasterchef = () => {\n  const abi = (masterChef as unknown) as AbiItem\n  return useContract(abi, getMasterChefAddress())\n}\n\nexport const useSousChef = (id) => {\n  const config = poolsConfig.find((pool) => pool.sousId === id)\n  const rawAbi = config.poolCategory === PoolCategory.BINANCE ? sousChefBnb : sousChef\n  const abi = (rawAbi as unknown) as AbiItem\n  return useContract(abi, config.contractAddress[process.env.REACT_APP_CHAIN_ID])\n}\n\nexport default useContract\n","import React from 'react'\nimport { Button, useWalletModal } from 'hertz-uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset, error } = useWallet()\n  const { onPresentConnectModal, onPresentWrongNetworkModal } = useWalletModal(connect, reset, error)\n  let comp\n  if (error) {\n    comp = (\n      <Button onClick={onPresentWrongNetworkModal} {...props} variant=\"danger\">\n        Wrong Network\n      </Button>\n    )\n  } else {\n    comp = (\n      <Button onClick={onPresentConnectModal} {...props}>\n        {TranslateString(292, 'Unlock Wallet')}\n      </Button>\n    )\n  }\n\n  return <div>{comp}</div>\n}\n\nexport default UnlockButton\n","import { Ifo } from './types'\n\nconst ifos: Ifo[] = [\n  {\n    id: 'leek',\n    tokenAddress: {\n      80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    idoAddress: {\n      80001: '0x8AaE8746bCFaAC6AC2927C1C9099943B4de5d7f3',\n      137: '0x0E9B41A5D64de6B4BF6e086417E813Df21707748',\n    },\n    isActive: false,\n    name: 'LEEK',\n    mainToken: 'MATIC',\n    subTitle: 'A community driven crypto and knowledge sharing DAO powered by $LEEK Social Token',\n    startTime: 1625625327,\n    endTime: 1626625327,\n    salesAmount: 500000,\n    projectSiteUrl: 'https://www.leekdao.xyz',\n    tokenDecimals: 18,\n  },\n\n  {\n    id: 'hertz',\n    tokenAddress: {\n      80001: '0xee18357454FD18AA69E03574177254c718E7C289',\n      137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    idoAddress: {\n      80001: '0x12efae1C7bA03258B9A75A1249EBA514A67eD2aC',\n      137: '0x0E9B41A5D64de6B4BF6e086417E813Df21707748',\n    },\n    isActive: true,\n    name: 'HERTZ',\n    mainToken: 'MATIC',\n    subTitle: 'Hertz One Stop Defi Asset Management Solution',\n    startTime: 1625625327,\n    endTime: 1626625327,\n    salesAmount: 1000000,\n    projectSiteUrl: '#',\n    tokenDecimals: 18,\n  },\n]\n\nexport default ifos\n","import { Airdrop } from './types'\n\nconst airdrop: Airdrop =\n{\n    id: 'leek',\n    tokenAddress: {\n        80001: '0xc657EFDb41eaBA15Cea84d34a2A60b18686FA929',\n        137: '0x67A32987a8EAA0644702C362B53B8EeBd126C20b',\n    },\n    isActive: true,\n    name: 'LEEK',\n    description: 'A community driven crypto and knowledge sharing DAO powered by $LEEK Social Token',\n    tokenDecimals: 18,\n    projectSiteUrl: \"https://leekdao.xyz\",\n    totalAmount: 10000\n}\n\nexport default airdrop","import farmsConfig from './farms'\n\nconst communityFarms = farmsConfig.filter((farm) => farm.isCommunity).map((farm) => farm.tokenSymbol)\n\nexport { farmsConfig, communityFarms }\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\nexport { default as airdropConfig } from \"./airdrop\"\n","import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(amount).times(new BigNumber(10).pow(18)).toString() })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, account) => {\n  // shit code: hard fix for old CTK and BLK\n  if (sousChefContract.options.address === '0x3B9B74f48E89Ebd8b45a53444327013a2308A9BC') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  if (sousChefContract.options.address === '0xBb2B66a2c7C2fFFB06EA60BeaD69741b3f5BF831') {\n    return sousChefContract.methods\n      .emergencyWithdraw()\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(new BigNumber(10).pow(18)).toString())\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmegencyUnstake = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, value: new BigNumber(0) })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import React from 'react'\nimport { Text } from 'hertz-uikit'\n\nconst Footer: React.FC = () => {\n    const chainId = process.env.REACT_APP_CHAIN_ID\n\n    return (\n        <div>\n            {\n                chainId === \"80001\" ? <Text color=\"failure\" fontSize=\"25px\">* Matic Testnet</Text> : \"\"\n            }\n        </div>\n    )\n}\n\nexport default Footer"],"sourceRoot":""}